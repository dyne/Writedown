#!/usr/bin/env zsh
#
# Copyright (C) 2015-2019 Dyne.org Foundation
#
# Designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it
# and/or modify it under the terms of the GNU Public License
# as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later
# version.
#
# This source code is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  Please refer to the GNU Public License for more
# details.
#
# You should have received a copy of the GNU Public License
# along with this source code; if not, write to: Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.

# full path to writedown's system
[[ -r /usr/local/writedown ]] && R=/usr/local/writedown
S=`pwd`
[[ -d ${S}/writedown ]] && R=${S}/writedown

# this nails invocation to be from inside the project's directory

writedown_version=0.5
writedown_release_date="Aug/2017"

source $R/zuper/zuper

vars+=(x_pandoc f_bib)
vars+=(input_format input_ext)
vars+=(output_format output_ext)
vars+=(section)

vars+=(book_title book_filename)

# for gettext
TEXTDOMAIN=writedown
# export DOWSE to env with path to the installation
# else start it from inside the dir with source dowse
DEBUG=${DEBUG:-0}
QUIET=${QUIET:-0}
LOG=${LOG:-""}

# conclude initialization
source $R/zuper/zuper.init

func "args: $*"

# load project configuration
[[ "$WRITEDOWN_CONFIG" = "" ]] && {
    [[ -r /etc/writedown/config.zsh ]] && \
        WRITEDOWN_CONFIG=/etc/writedown/config.zsh
    [[ -r config.zsh ]] && WRITEDOWN_CONFIG=config.zsh }
[[ "$WRITEDOWN_CONFIG" = "" ]] || {
	act "loading config: $WRITEDOWN_CONFIG"
	source $WRITEDOWN_CONFIG
}

book_title=${WRITEDOWN_TITLE:-"Writedown Example Book"}
book_filename=${WRITEDOWN_FILENAME:-${book_title// /_}}
book_author=${WRITEDOWN_AUTHOR:-Anonymous}
book_affiliation=${WRITEDOWN_AFFILIATION:-Made with Writedown by Dyne.org}
book_date=${WRITEDOWN_DATE:-`date +'%A, %d %B, %Y'`}
book_nrsec=${WRITEDOWN_NRSEC:-no}
book_toc=${WRITEDOWN_TOC:-yes}
book_class=${WRITEDOWN_CLASS:-article}
book_citationstyle=${WRITEDOWN_CITSTYLE:-harvard-kings-college-london}
book_fontsize=${WRITEDOWN_FONTSIZE:-14pt}
book_tags=${WRITEDOWN_TAGS:-"[comma, separated, words, between, square, brackets]"}

# experimental, until extras/pandoc-zotxt is fixed
book_zotero=${WRITEDOWN_ZOTERO:-no}

input_format=${WRITEDOWN_INPUT:-markdown}
input_ext=${WRITEDOWN_INPUT_EXT:-md}
f_bib=${WRITEDOWN_BIB:-$S/views/references.bib}

x_pandoc=${WRITEDOWN_PANDOC:="pandoc --listings --standalone -f $input_format "}

[[ $DEBUG != 0 ]]   &&  x_pandoc+=" --verbose "

# add bibliographic references to pandoc rendering if file is present
if [[ "$book_zotero" = "yes" ]]; then
	x_pandoc+=" --filter pandoc-zotxt --filter pandoc-citeproc"
elif [[ -r $f_bib ]]; then
    x_pandoc+=" --filter pandoc-citeproc --bibliography $f_bib "
fi

[[ "$*" = "source" ]] && return 0

WRITEDOWN_OUTPUT_FORMAT=${1:-$WRITEDOWN_OUTPUT_FORMAT}
[[ "$WRITEDOWN_OUTPUT_FORMAT" = "" ]] && WRITEDOWN_OUTPUT_FORMAT=docx
WRITEDOWN_OUTPUT_EXTENSION=${1:-$WRITEDOWN_OUTPUT_EXTENSION}
[[ "$WRITEDOWN_OUTPUT_EXTENSION" = "" ]] && WRITEDOWN_OUTPUT_EXTENSION=docx

correct_extended_chars() {
    fn correct_extended_chars
    local f out dest
    local extended corrected
    local errl corrl
    f="$1"
    out="$2"
    req=(f out)
    freq=($f)
    ckreq || return 1

    ztmp
    dest=$ztmpfile
    cp $f $dest
    extended=`perl -ane '{ if(m/[[:^ascii:]]/) { print  } }' $dest`
    if [[ ${#extended} -gt 0 ]]; then
        errl=`print $extended | wc -l`
        act "correcting invalid characters in $f"
        if [[ "$(uname) " = "Darwin " ]]; then
            sed -i '' -e "s/‘/'/g; s/’/'/g; s/…/.../g" $dest
            sed -i '' -e 's/“/"/g; s/”/"/g; s/¨/"/g' $dest
        else
            sed -i'' \
                -e "s/‘/'/g; s/’/'/g; s/…/.../g" \
                -e 's/“/"/g; s/”/"/g; s/¨/"/g' $dest
        fi
        corrected=`perl -ane '{ if(m/[[:^ascii:]]/) { print  } }' $dest`
        corrl=`print $corrected | wc -l`
        print
        print - "$corrected"
        print
        warning "extended characters detected on $errl lines:"
        warning "lines listed above may break the pdf rendering"
        warning "attempted fix..."

        if [[ $corrl != $errl ]]; then
            notice "corrected $(( $errl - $corrl )) lines"
        else
            error "cannot apply autocorrection on any of the lines above"
        fi
    fi
    cp $dest $out
    rm -f $ztmpfile
}

# If you use the --template option it ignores the -H
# --include-in-header option so we move the include into the
# template.tex
case $WRITEDOWN_OUTPUT_FORMAT in
    pdf|latex)
        notice "Configuring pdf/latex output format"
        if [[ "$WRITEDOWN_LATEX_TEMPLATE" != "" ]] &&
               [[ -r "$WRITEDOWN_LATEX_TEMPLATE" ]]; then
            tmpl=$WRITEDOWN_LATEX_TEMPLATE
        else
            try=/etc/writedown/template.tex; [[ -r $try ]] && tmpl=$try
            try=$R/template.tex;             [[ -r $try ]] && tmpl=$try
            try=$S/template.tex;                [[ -r $try ]] && tmpl=$try
            try=$S/views/template.tex;          [[ -r $try ]] && tmpl=$try
        fi
        [[ -r $tmpl ]] || {
            error "Latex template not found ($tmpl)"
            error "set WRITEDOWN_LATEX_TEMPLATE in config.zsh"
            error "default: views/template.tex (from $R/template.tex)"
            return 1 }
        act "latex template: $tmpl"

        x_pandoc+=" --template=$tmpl "

        if [[ "$WRITEDOWN_OUTPUT_FORMAT" = "latex" ]]; then
            output_format=latex
            output_ext=tex
            act "rendering to latex"

        elif [[ "$WRITEDOWN_OUTPUT_FORMAT" = "pdf" ]]; then
            output_format=latex
            output_ext=pdf
            act "rendering to pdf"
        fi
        ;;

    docx)
        output_format=docx
        output_ext=docx
        ;;
    *)
        output_format=$WRITEDOWN_OUTPUT_FORMAT
        output_ext=$WRITEDOWN_OUTPUT_EXTENSION
        ;;
esac

# optional second argument, single section (file) to render
section="$2"

[[ $DEBUG != 0 ]] && zdump

[[ "$section" = "" ]] || {
    source=""

    try="views/${section}.$input_ext"; [[ -r "$try" ]] && source="$try"
    try="views/${section}";            [[ -r "$try" ]] && source="$try"
    try="${section}.$input_ext";       [[ -r "$try" ]] && source="$try"
    try="${section}";                  [[ -r "$try" ]] && source="$try"
    [[ "$source" = "" ]] && {
        error "$section not found"
        return 1 }
    notice "Rendering: $source"
    act "to format $output_format with extension $output_ext"

    ztmp
    tmpsrc=$ztmpfile
    correct_extended_chars "$source" $tmpsrc

    if [[ -d writedown ]]; then  # we are inside a project
        output="$S/pub/${book_filename}-${section/\//-}.$output_ext"
    else
        # writedown called around from outside a project for the
        # conversion of a single file
        output="$S/${book_filename}.$output_ext"
    fi
    # reset output file
    [[ -r "$output" ]] && rm -f "$output"

    act "rendering to $output"
	pushd $S/views
    func "${=x_pandoc} -t ${output_format} $tmpsrc -o $output"
    ${=x_pandoc} -t ${output_format} $tmpsrc -o $S/$output
    res=$?
	popd
    [[ $res != 0 ]] && {
        error "Error in pandoc, returned code: $res"
        return $res
    }
    return 0
}


# render all files in views



# create temp dir
ztmp
frontpage=$ztmpfile

cslstyle=$ztmpfile

cat <<EOF > $frontpage
---
title: ${book_title}
author: ${book_author}
affiliation: ${book_affiliation}
date: ${book_date}
pdf_document:
keep_tex: yes
number_sections: ${book_nrsec}
toc: ${book_toc}
documentclass: ${book_class}
fontsize: ${book_fontsize}
bibliography: ["${f_bib}"]
csl: $R/citstyle/${book_citationstyle}.csl
keywords: ${book_tags}
EOF

[[ -r views/abstract.txt ]] && {
    print "abstract: |\n" >> $frontpage
    for i in ${(f)"$(cat views/abstract.txt)"}; do
        ## add two spaces before each line, else not valid yml
        if [[ "$i[2]" != " " ]]; then
            print "  $i" >> $frontpage
        else
            print "$i" >> $frontpage
        fi
    done
}

# [[ $DEBUG = 0 ]] || {
#     notice "Frontpage rendered:"
#     cat $frontpage
# }

views=(`grep -v '^#' views/index.txt`)
[[ ${#views} = 0 ]] && {
    error "Nothing found in views, please write down something!"
    return 1 }

for i in $views; do
    f="$i"
    [[ -r "$f" ]] || f="views/$i"
    [[ -r "$f" ]] || {
        error "error in views/index.txt"
        error "file not found: $i"
        return 1
    }
    act "rendering file: ::1 path::" $f
    ztmp
    dest=$ztmpfile
    correct_extended_chars $f $dest

    cat <<EOF >> $frontpage
`cat $dest`
EOF
done

[[ -r $f_bib ]] && {
    cat <<EOF >> $frontpage
# Bibliography

EOF
}

# reset output file
output=${WRITEDOWN_OUTPUT:-$S/pub/$book_filename.$output_ext}
[[ -r "$output" ]] && rm -f "$output"

# render using pandoc
notice "pandoc-cmd: $x_pandoc  -t $output_format $frontpage -o $output"
func "$x_pandoc  -t $output_format $frontpage -o $output"
pushd $S/views
${=x_pandoc} -t $output_format $frontpage -o "$output"

[[ $? = 0 ]] && {
    notice "Succesful rendering to file: pub/$book_filename.$output_ext"
    ls -lh $S/pub/$book_filename.$output_ext
    file   $S/pub/$book_filename.$output_ext
}
popd
